// Code generated by protoc-gen-go.
// source: schema/schema.proto
// DO NOT EDIT!

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	schema/schema.proto

It has these top-level messages:
	Schema
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Schema_DataType int32

const (
	Schema_UNKNOWN_DATA_TYPE Schema_DataType = 0
	Schema_BOOL              Schema_DataType = 1
	Schema_INT               Schema_DataType = 2
	Schema_FLOAT             Schema_DataType = 3
	Schema_LONG              Schema_DataType = 4
	Schema_DOUBLE            Schema_DataType = 5
	Schema_STRING            Schema_DataType = 6
)

var Schema_DataType_name = map[int32]string{
	0: "UNKNOWN_DATA_TYPE",
	1: "BOOL",
	2: "INT",
	3: "FLOAT",
	4: "LONG",
	5: "DOUBLE",
	6: "STRING",
}
var Schema_DataType_value = map[string]int32{
	"UNKNOWN_DATA_TYPE": 0,
	"BOOL":              1,
	"INT":               2,
	"FLOAT":             3,
	"LONG":              4,
	"DOUBLE":            5,
	"STRING":            6,
}

func (x Schema_DataType) String() string {
	return proto.EnumName(Schema_DataType_name, int32(x))
}
func (Schema_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Schema_Type int32

const (
	Schema_LITERAL Schema_Type = 0
	Schema_GAGUE   Schema_Type = 1
	Schema_COUNTER Schema_Type = 2
)

var Schema_Type_name = map[int32]string{
	0: "LITERAL",
	1: "GAGUE",
	2: "COUNTER",
}
var Schema_Type_value = map[string]int32{
	"LITERAL": 0,
	"GAGUE":   1,
	"COUNTER": 2,
}

func (x Schema_Type) String() string {
	return proto.EnumName(Schema_Type_name, int32(x))
}
func (Schema_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Schema struct {
	Name        string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id          uint32          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Version     uint32          `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Topic       string          `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Description string          `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Value       []*Schema_Value `protobuf:"bytes,6,rep,name=value" json:"value,omitempty"`
}

func (m *Schema) Reset()                    { *m = Schema{} }
func (m *Schema) String() string            { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()               {}
func (*Schema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Schema) GetValue() []*Schema_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Schema_Value struct {
	Name        string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	IsKey       bool            `protobuf:"varint,3,opt,name=is_key,json=isKey" json:"is_key,omitempty"`
	DataType    Schema_DataType `protobuf:"varint,4,opt,name=data_type,json=dataType,enum=Schema_DataType" json:"data_type,omitempty"`
	Type        Schema_Type     `protobuf:"varint,5,opt,name=type,enum=Schema_Type" json:"type,omitempty"`
}

func (m *Schema_Value) Reset()                    { *m = Schema_Value{} }
func (m *Schema_Value) String() string            { return proto.CompactTextString(m) }
func (*Schema_Value) ProtoMessage()               {}
func (*Schema_Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func init() {
	proto.RegisterType((*Schema)(nil), "Schema")
	proto.RegisterType((*Schema_Value)(nil), "Schema.Value")
	proto.RegisterEnum("Schema_DataType", Schema_DataType_name, Schema_DataType_value)
	proto.RegisterEnum("Schema_Type", Schema_Type_name, Schema_Type_value)
}

func init() { proto.RegisterFile("schema/schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4a, 0xe3, 0x40,
	0x14, 0xc6, 0x9b, 0x3f, 0x93, 0xa6, 0xa7, 0xdb, 0x32, 0x3b, 0xbb, 0x85, 0xb0, 0x57, 0xa1, 0x7b,
	0x53, 0x10, 0x2b, 0xd4, 0x27, 0x48, 0x6d, 0x0c, 0xa5, 0x21, 0x91, 0xe9, 0x44, 0xf1, 0x2a, 0x8c,
	0xcd, 0x80, 0x83, 0xb6, 0x09, 0x4d, 0x2c, 0xe4, 0x81, 0x7c, 0x2a, 0x5f, 0x46, 0x32, 0x31, 0x20,
	0xea, 0xd5, 0x9c, 0xf3, 0xfb, 0xbe, 0x73, 0xce, 0x07, 0x03, 0x7f, 0xca, 0xdd, 0xa3, 0xd8, 0xf3,
	0x8b, 0xf6, 0x99, 0x17, 0xc7, 0xbc, 0xca, 0xa7, 0x6f, 0x06, 0x58, 0x5b, 0x05, 0x08, 0x01, 0xf3,
	0xc0, 0xf7, 0xc2, 0xd1, 0x5c, 0x6d, 0x36, 0xa0, 0xaa, 0x26, 0x63, 0xd0, 0x65, 0xe6, 0xe8, 0xae,
	0x36, 0x1b, 0x51, 0x5d, 0x66, 0xc4, 0x81, 0xfe, 0x49, 0x1c, 0x4b, 0x99, 0x1f, 0x1c, 0x43, 0xc1,
	0xae, 0x25, 0x7f, 0x01, 0x55, 0x79, 0x21, 0x77, 0x8e, 0xa9, 0xc6, 0xdb, 0x86, 0xb8, 0x30, 0xcc,
	0x44, 0xb9, 0x3b, 0xca, 0xa2, 0x6a, 0x66, 0x90, 0xd2, 0x3e, 0x23, 0xf2, 0x1f, 0xd0, 0x89, 0x3f,
	0xbf, 0x08, 0xc7, 0x72, 0x8d, 0xd9, 0x70, 0x31, 0x9a, 0xb7, 0x69, 0xe6, 0xb7, 0x0d, 0xa4, 0xad,
	0xf6, 0xef, 0x55, 0x03, 0xa4, 0xc0, 0x8f, 0x21, 0xbf, 0x1c, 0xd1, 0xbf, 0x1f, 0x99, 0x80, 0x25,
	0xcb, 0xf4, 0x49, 0xd4, 0x2a, 0xb5, 0x4d, 0x91, 0x2c, 0x37, 0xa2, 0x26, 0xe7, 0x30, 0xc8, 0x78,
	0xc5, 0xd3, 0xaa, 0x2e, 0x84, 0xca, 0x3d, 0x5e, 0xe0, 0xee, 0xfe, 0x8a, 0x57, 0x9c, 0xd5, 0x85,
	0xa0, 0x76, 0xf6, 0x51, 0x11, 0x17, 0x4c, 0xe5, 0x44, 0xca, 0xf9, 0xab, 0x73, 0x2a, 0x97, 0x52,
	0xa6, 0x1c, 0xec, 0x6e, 0x8e, 0x4c, 0xe0, 0x77, 0x12, 0x6d, 0xa2, 0xf8, 0x2e, 0x4a, 0x57, 0x1e,
	0xf3, 0x52, 0x76, 0x7f, 0xe3, 0xe3, 0x1e, 0xb1, 0xc1, 0x5c, 0xc6, 0x71, 0x88, 0x35, 0xd2, 0x07,
	0x63, 0x1d, 0x31, 0xac, 0x93, 0x01, 0xa0, 0xeb, 0x30, 0xf6, 0x18, 0x36, 0x1a, 0x35, 0x8c, 0xa3,
	0x00, 0x9b, 0x04, 0xc0, 0x5a, 0xc5, 0xc9, 0x32, 0xf4, 0x31, 0x6a, 0xea, 0x2d, 0xa3, 0xeb, 0x28,
	0xc0, 0xd6, 0xf4, 0x0c, 0x4c, 0xb5, 0x7e, 0x08, 0xfd, 0x70, 0xcd, 0x7c, 0xea, 0x85, 0xb8, 0xd7,
	0x6c, 0x08, 0xbc, 0x20, 0xf1, 0xb1, 0xd6, 0xf0, 0xab, 0x38, 0x89, 0x98, 0x4f, 0xb1, 0xfe, 0x60,
	0xa9, 0x4f, 0xbe, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xea, 0x3e, 0x28, 0xfb, 0x01, 0x00,
	0x00,
}
